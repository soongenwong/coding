Lists and sets: 
- Storing data structures. Storing values.
- Using an array or linked list. 
- Array list (predetermine the size of the list)
- Linked list (automatically grows as you add one new value): must have head and tail
- Lists can store repeating items and are ordered. 
- Lists are slow because you have to go through a linear search, looking through each value one by one.
- Sets store unique items and are fast to search. 
- Sets use hash tables to store unique values: O(1) time complexity
- Sets are good for small sample size but not large, due the the hashing function. There are more risks for clashing with more values. 
- Sets are fast to search because it doesn't have to look through all values, it uses a hashing function to quickly determine where a value should be stored. 



Stack and queues:
- Stack has a FILO (first in last out) basis. It's like placing items into a container and taking it out. 
- Stack: push (add), pop (remove), isEmpty, isFull, peek (view the top item without removing it)
- Queue has a FIFO (first in first out) basis. It's like queuing up to buy food. The first at the queue gets it first.
- Queue: enqueue to add, dequeue to remove. 
- Queue: for peek, view the top item is the one that is about to get out wihtout removing it.
- Peek function: view the value that is about to get removed first. 



Trees:
- Root node, parent, child, sibling, leaf node
- Size of tree is the total number of nodes
- Binary trees
- Trees are used to store data in hierarchical fashion
- Very efficient in inserting and deleting data. 
- Depth first search (DFS): top to bottom sequentially (from left to right)
- Breadth first search (BFS): search nodes on the same level from top to bottom. 
- Every node has a maximum of 2 child nodes
- Values less than the node are placed in left child node, values greater placed in right child node
- Key, left node, right node, lookup method, insertion, removal. 



Creating a class through the use of capital T as in Stack<T>, is an example of "generics". 
T can be integer, string, or any other type. 